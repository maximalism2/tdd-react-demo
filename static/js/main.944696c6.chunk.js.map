{"version":3,"sources":["lib/makeCancelable.js","lib/noop.js","components/Post.js","App.js","lib/fakedData.js","mocks/browserHandlers.js","mocks/browser.js","index.js"],"names":["CanceledPromiseError","Error","noop","Post","content","App","useState","posts","setPosts","useEffect","postsFetcher","promise","wasCanceled","canceledError","Promise","resolve","reject","then","val","error","cancel","makeCancelable","fetch","response","json","catch","map","post","key","id","fakeAuthor","avatar","faker","image","fullName","name","findName","undefined","browserHandlers","rest","get","req","res","ctx","amount","Array","fill","random","uuid","lorem","lines","author","fakePosts","worker","setupWorker","a","start","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAmBaA,EAAb,kDACE,aAAe,uCACP,6BAFV,sBAA0CC,QCnBnC,SAASC,KCET,SAASC,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QACrB,OAAO,6BAAMA,GC2BAC,MAzBf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAcb,OAXAC,qBAAU,WACR,IAAMC,EHToB,SAACC,GAC7B,IAAIC,GAAc,EACZC,EAAgB,IAAIb,EAS1B,MAAO,CACLW,QARqB,IAAIG,SAAQ,SAACC,EAASC,GAC3CL,EAAQM,MACN,SAACC,GAAD,OAAUN,EAAcI,EAAOH,GAAiBE,EAAQG,MACxD,SAACC,GAAD,OAA0BH,EAAdJ,EAAqBC,EAAwBM,SAM3DC,OAFK,WAGHR,GAAc,IGLKS,CAAeC,MAAM,WAO1C,OALAZ,EAAaC,QACVM,MAAK,SAACM,GAAD,OAAcA,EAASC,UAC5BP,KAAKT,GACLiB,MAAMvB,GAEF,kBAAMQ,EAAaU,YACzB,IAGD,6BACE,0DAECb,EAAMmB,KAAI,SAACC,GAAD,OACT,kBAACxB,EAAD,eAAMyB,IAAKD,EAAKE,IAAQF,S,wCCtBzB,SAASG,IACd,MAAO,CACLC,OAAQC,IAAMC,MAAMF,SACpBG,SAAUF,IAAMG,KAAKC,SAAS,GAAI,QAAIC,ICFnC,IAAMC,EAAkB,CAC7BC,IAAKC,IAAI,UAAU,SAACC,EAAKC,EAAKC,GAAX,OAAmBD,EAAIC,EAAInB,KDKzC,WAAgC,IAAboB,EAAY,uDAAH,EACjC,OAAO,IAAIC,MAAMD,GAAQE,KAAK,MAAMpB,KAAI,iBAAO,CAC7CG,GAAIG,IAAMe,OAAOC,OACjB5C,QAAS4B,IAAMiB,MAAMC,QACrBC,OAAQrB,QCTyCsB,CAAU,SCDlDC,EAASC,IAAW,WAAX,cAAehB,ICGpC,sBAAC,sBAAAiB,EAAA,sEACMF,EAAOG,QADb,OAGAC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAP1B,0CAAD,I","file":"static/js/main.944696c6.chunk.js","sourcesContent":["export const makeCancelable = (promise) => {\n  let wasCanceled = false\n  const canceledError = new CanceledPromiseError()\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    promise.then(\n      (val) => (wasCanceled ? reject(canceledError) : resolve(val)),\n      (error) => (wasCanceled ? reject(canceledError) : reject(error))\n    )\n  })\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      wasCanceled = true\n    },\n  }\n}\n\nexport class CanceledPromiseError extends Error {\n  constructor() {\n    super(\"Promise has been canceled\")\n  }\n}\n","export function noop() {}\n","import React from \"react\"\n\nexport function Post({ content }) {\n  return <div>{content}</div>\n}\n","import React, { useEffect, useState } from \"react\"\nimport { makeCancelable } from \"./lib/makeCancelable\"\nimport { noop } from \"./lib/noop\"\nimport { Post } from \"./components/Post\"\n\nfunction App() {\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    const postsFetcher = makeCancelable(fetch(\"/posts\"))\n\n    postsFetcher.promise\n      .then((response) => response.json())\n      .then(setPosts)\n      .catch(noop)\n\n    return () => postsFetcher.cancel()\n  }, [])\n\n  return (\n    <div>\n      <h1>TDD in React is awesome!!!</h1>\n\n      {posts.map((post) => (\n        <Post key={post.id} {...post} />\n      ))}\n    </div>\n  )\n}\n\nexport default App\n","import faker from \"faker/locale/en\"\n\nexport function fakeAuthor() {\n  return {\n    avatar: faker.image.avatar(),\n    fullName: faker.name.findName(\"\", \"\", undefined),\n  }\n}\n\nexport function fakePosts(amount = 3) {\n  return new Array(amount).fill(null).map(() => ({\n    id: faker.random.uuid(),\n    content: faker.lorem.lines(),\n    author: fakeAuthor(),\n  }))\n}\n","import { rest } from \"msw\"\nimport { fakePosts } from \"../lib/fakedData\"\n\nexport const browserHandlers = [\n  rest.get(\"/posts\", (req, res, ctx) => res(ctx.json(fakePosts(5)))),\n]\n","import { setupWorker } from \"msw\"\nimport { browserHandlers } from \"./browserHandlers\"\n\nexport const worker = setupWorker(...browserHandlers)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nimport { worker } from \"./mocks/browser\"\n;(async () => {\n  await worker.start()\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  )\n})()\n"],"sourceRoot":""}